import style from './Login.module.css';
import logo from '../../assets/logo.webp';
import { Input } from '../../components/Input';
import { useForm } from 'react-hook-form';
import * as yup from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';
import { Button } from '../../components/Button';
import { Link  } from 'react-router-dom';
import { AiOutlineMail } from 'react-icons/ai';
import { BsKey } from 'react-icons/bs';
// import { api } from '../../server';
import { useAuth } from '../../hooks/auth';

// √â definida a interface IFormValues para representar os valores do formul√°rio (email e senha).
interface IFormValues {
  email: string;
  password: string;
}

// Componente de Login
export function Login() {

  // Obt√©m a fun√ß√£o signIn do contexto de autentica√ß√£o
  const { signIn } = useAuth();
  // const navigate = useNavigate();

  // Define um schema de valida√ß√£o usando a biblioteca Yup para validar o formul√°rio. O schema define regras para o email e a senha.
  // yup.object().shape({}) do Yup. Dentro desse objeto, duas valida√ß√µes s√£o definidas para os campos email e password.
  
  const schema = yup.object().shape({
    email: yup
      .string()
      .email('Digite um email v√°lido')
      .required('Campo de email obrigat√≥rio'),
    password: yup.string().required('Campo de senha obrigat√≥rio'),
  });

  /* Detalhes de yup.object().shape({}) do Yup.
  Para o campo email, a fun√ß√£o yup.string() √© chamada para indicar que estamos validando uma string. Em seguida, a fun√ß√£o email() 
  √© usada para validar se o valor √© um email v√°lido. Caso contr√°rio, a mensagem de erro "Digite um email v√°lido" ser√° mostrada caso 
  essa valida√ß√£o n√£o passe. Al√©m disso, a fun√ß√£o required() √© usada para indicar que o campo √© obrigat√≥rio. Isso significa que se o
  campo estiver vazio, a mensagem de erro "Campo de email obrigat√≥rio" ser√° mostrada.

  Para o campo password, apenas a fun√ß√£o yup.string() √© chamada para indicar que estamos validando uma string. Em seguida, a fun√ß√£o
  required() √© usada para indicar que o campo √© obrigat√≥rio. Da mesma forma que no campo email, se o campo estiver vazio, a mensagem
  de erro "Campo de senha obrigat√≥rio" ser√° mostrada.

  Dessa forma, o schema de valida√ß√£o usando o Yup estabelece as regras de valida√ß√£o para os campos de email e senha, garantindo que
  os valores inseridos no formul√°rio atendam a essas regras antes de serem submetidos
  */


  


// Usa o hook useForm para gerenciar o estado do formul√°rio e a valida√ß√£o
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormValues>({
    resolver: yupResolver(schema),
  });

  /*
Usamos o hook useForm para gerenciar o estado do formul√°rio e suas valida√ß√µes.
register √© usado para vincular campos do formul√°rio a regras de valida√ß√£o.
handleSubmit √© chamado quando o formul√°rio √© enviado, ativando a valida√ß√£o.
formState: { errors } guarda o estado do formul√°rio, incluindo erros de valida√ß√£o.
O schema de valida√ß√£o schema, definido com Yup, √© aplicado com resolver.
Dessa forma, o hook useForm gerencia a valida√ß√£o e submiss√£o do formul√°rio, com register associando regras de valida√ß√£o aos campos
e handleSubmit executando a l√≥gica ao enviar. Erros de valida√ß√£o ficam em errors

O resultado do useForm √© desestruturado para extrair tr√™s elementos essenciais:
  register
  handleSubmit
  format: {erros}

  Com isso, o useForm est√° configurado para usar o schema de valida√ß√£o schema definido anteriormente para validar os campos do formul√°rio
  */



  // Fun√ß√£o de submiss√£o do formul√°rio
  const submit = handleSubmit(async ({ email, password }) => {
    try {
      // Chama a fun√ß√£o signIn para autenticar o usu√°rio
      signIn({ email, password });
    } catch (error) {
      console.log('üöÄ ~ file: index.tsx:41 ~ submit ~ error:', error);
    }
    // return submit;
    /*
     Finalmente, estamos retornando a pr√≥pria fun√ß√£o submit. Isso pode ser desnecess√°rio aqui, pois submit j√° √© uma fun√ß√£o criada
      pelo handleSubmit. O retorno da fun√ß√£o √© usado quando voc√™ deseja controlar o comportamento padr√£o do formul√°rio, como prevenir
      o recarregamento da p√°gina ap√≥s a submiss√£o. Nesse caso, n√£o parece ter um prop√≥sito claro para o retorno.
    */
  });

  // Renderiza a interface do login
  return (
    <div className={style.background}>
      <div className={`container ${style.container}`}>
        <div className={style.wrapper}>
          <div>
            <img src={logo} alt="" />
          </div>
          <div className={style.card}>
            <h2>Ol√°, seja bem vindo!</h2>
            <form onSubmit={submit}>
              {/* Componente Input para o campo de email */}
              <Input
                placeholder="Email"
                type="text"
                {...register('email', { required: true })}
                error={errors.email && errors.email.message}
                icon={<AiOutlineMail size={20} />}
              />
              {/* Componente Input para o campo de senha */}
              <Input
                placeholder="Senha"
                type="password"
                {...register('password', { required: true })}
                error={errors.password && errors.password.message}
                icon={<BsKey size={20} />}
              />

              {/* Componente Button para o bot√£o de entrar */}
              <Button text="Entrar" />
            </form>
            <div className={style.register}>
              <span>
                Ainda n√£o tem conta? <Link to={'/register'}>Cadastre-se</Link>{' '}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

/*
O objetivo deste c√≥digo √© criar um componente de login em uma aplica√ß√£o React. O componente "Login" permite aos usu√°rios inserir
suas credenciais (email e senha) para autentica√ß√£o na aplica√ß√£o. O c√≥digo lida com a valida√ß√£o dos campos de entrada usando a biblioteca
Yup, realiza a autentica√ß√£o do usu√°rio chamando a fun√ß√£o signIn do contexto de autentica√ß√£o e fornece uma interface visual para o 
processo de login.

*/