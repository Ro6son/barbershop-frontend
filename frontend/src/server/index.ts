import axios, {
  AxiosError,
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
} from 'axios';

// Cria uma inst√¢ncia do Axios com a base URL definida como http://localhost:
const api: AxiosInstance = axios.create({
  baseURL: 'http://localhost:3333',
});

// Vari√°vel para controlar se uma atualiza√ß√£o do token est√° em andamento
let isRefreshing = false;

// Array que armazenar√° as requisi√ß√µes que falharam durante a atualiza√ß√£o do token
let failedRequest: Array<RequestConfig> = [];

// Interface que estende a configura√ß√£o padr√£o do AxiosRequestConfig com op√ß√µes adicionais
interface RequestConfig extends AxiosRequestConfig {
  onFailure?: (error: AxiosError) => void;
  onSuccess?: (response: AxiosResponse) => void;
}

// Intercepta as requisi√ß√µes antes de serem enviadas para adicionar o token de autoriza√ß√£o ao cabe√ßalho
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token:semana-heroi');

  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Array para armazenar fun√ß√µes de callback que ser√£o chamadas ap√≥s a atualiza√ß√£o do token
const refreshSubscribers: Array<(token: string) => void> = [];


// Intercepta as respostas de erro das requisi√ß√µes para lidar com tokens expirados
api.interceptors.response.use(
  (response) => response,
  async (error: AxiosError | unknown) => {
    const originalRequest = (error as AxiosError)?.config as RequestConfig;
    if (error instanceof AxiosError && error.response?.status === 401) {
      if (error.response?.data.code === 'token.expired') {
        try {
          // Obt√©m o token de atualiza√ß√£o
          const refresh_token = localStorage.getItem(
            'refresh_token:semana-heroi',
          );

          // Faz uma requisi√ß√£o para renovar o token
          const response = await api.post('/users/refresh', {
            refresh_token,
          });
          console.log(
            'üöÄ ~ file: index.ts:44 ~ response:',
            response.data.refresh_token,
          );

          // Atualiza os tokens no armazenamento local
          const { token, refresh_token: newToken } = response.data;
          localStorage.setItem('token:semana-heroi', token);
          localStorage.setItem('refresh_token:semana-heroi', newToken);

          //A vari√°vel isRefreshing √© definida como false para indicar que a atualiza√ß√£o foi conclu√≠da.
          isRefreshing = false;

          // Chama as fun√ß√µes de callback para processar as requisi√ß√µes pendentes
          //Chamamos a fun√ß√£o onRefreshed(token) para notificar quaisquer subscribers que possam estar aguardando a atualiza√ß√£o do token.
          onRefreshed(token);

          // Atualizamos o cabe√ßalho Authorization da requisi√ß√£o original com o novo token.
          if (originalRequest?.headers) {
            originalRequest.headers.Authorization = `Bearer ${token}`;
          }

          // Reenvia a requisi√ß√£o original com o novo token
          return axios(originalRequest);
        } catch (error) {
          // Chama as fun√ß√µes de callback para lidar com as requisi√ß√µes que falharam
          failedRequest.forEach((request) => {
            request.onFailure?.(error as AxiosError);
          });
          failedRequest = [];
        }

        // Retorna uma nova Promise para reenviar a requisi√ß√£o ap√≥s a atualiza√ß√£o do token
        return new Promise((resolve, reject) => {
          failedRequest.push({
            ...originalRequest,
            onSuccess: (response) => resolve(response),
            onFailure: (error) => reject(error),
          });
        });
      }
    } else {
      // Remove os tokens e informa√ß√µes do usu√°rio do armazenamento local
      localStorage.removeItem('token:semana-heroi');
      localStorage.removeItem('refresh_token:semana-heroi');
      localStorage.removeItem('user:semana-heroi');
    }

    // Rejeita a Promise com o erro original
    return Promise.reject(error);
  },
);

// Fun√ß√£o para chamar as fun√ß√µes de callback ap√≥s a atualiza√ß√£o do token
function onRefreshed(token: string) {
  refreshSubscribers.forEach((callback) => callback(token));
}

// Exporta a inst√¢ncia do Axios customizada
export { api };
